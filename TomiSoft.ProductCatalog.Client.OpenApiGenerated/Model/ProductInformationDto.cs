/* 
 * TomiSoft Product Database Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TomiSoft.ProductCatalog.Client.OpenApiGenerated.Client.OpenAPIDateConverter;

namespace TomiSoft.ProductCatalog.Client.OpenApiGenerated.Model
{
    /// <summary>
    /// ProductInformationDto
    /// </summary>
    [DataContract]
    public partial class ProductInformationDto :  IEquatable<ProductInformationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductInformationDto" /> class.
        /// </summary>
        /// <param name="barcode">The product&#39;s barcode.</param>
        /// <param name="name">The name of the product.</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="images">Contains URLs to sample images of the product. If there are no images, this will be an empty array.</param>
        /// <param name="category">category.</param>
        public ProductInformationDto(string barcode = default(string), string name = default(string), ManufacturerInfoDto manufacturer = default(ManufacturerInfoDto), List<ProductImageDto> images = default(List<ProductImageDto>), CategoryDto category = default(CategoryDto))
        {
            this.Barcode = barcode;
            this.Name = name;
            this.Manufacturer = manufacturer;
            this.Images = images;
            this.Category = category;
        }
        
        /// <summary>
        /// The product&#39;s barcode
        /// </summary>
        /// <value>The product&#39;s barcode</value>
        [DataMember(Name="Barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }

        /// <summary>
        /// The name of the product
        /// </summary>
        /// <value>The name of the product</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name="Manufacturer", EmitDefaultValue=false)]
        public ManufacturerInfoDto Manufacturer { get; set; }

        /// <summary>
        /// Contains URLs to sample images of the product. If there are no images, this will be an empty array
        /// </summary>
        /// <value>Contains URLs to sample images of the product. If there are no images, this will be an empty array</value>
        [DataMember(Name="Images", EmitDefaultValue=false)]
        public List<ProductImageDto> Images { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="Category", EmitDefaultValue=false)]
        public CategoryDto Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductInformationDto {\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductInformationDto);
        }

        /// <summary>
        /// Returns true if ProductInformationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductInformationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductInformationDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
