/* 
 * TomiSoft Product Database Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TomiSoft.ProductCatalog.Client.OpenApiGenerated.Client.OpenAPIDateConverter;

namespace TomiSoft.ProductCatalog.Client.OpenApiGenerated.Model
{
    /// <summary>
    /// Brief information about a manufacturer
    /// </summary>
    [DataContract]
    public partial class ManufacturerInfoDto :  IEquatable<ManufacturerInfoDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManufacturerInfoDto" /> class.
        /// </summary>
        /// <param name="manufacturerId">The unique identifier of the manufacturer.</param>
        /// <param name="name">The manufacturer&#39;s name.</param>
        /// <param name="countryCode">The manufacturer&#39;s country code in ISO 3166-2 format.</param>
        /// <param name="address">The address of the manufacturer&#39;s headquarters.</param>
        /// <param name="website">The manufacturer&#39;s website.</param>
        public ManufacturerInfoDto(int manufacturerId = default(int), string name = default(string), string countryCode = default(string), string address = default(string), string website = default(string))
        {
            this.ManufacturerId = manufacturerId;
            this.Name = name;
            this.CountryCode = countryCode;
            this.Address = address;
            this.Website = website;
        }
        
        /// <summary>
        /// The unique identifier of the manufacturer
        /// </summary>
        /// <value>The unique identifier of the manufacturer</value>
        [DataMember(Name="ManufacturerId", EmitDefaultValue=false)]
        public int ManufacturerId { get; set; }

        /// <summary>
        /// The manufacturer&#39;s name
        /// </summary>
        /// <value>The manufacturer&#39;s name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The manufacturer&#39;s country code in ISO 3166-2 format
        /// </summary>
        /// <value>The manufacturer&#39;s country code in ISO 3166-2 format</value>
        [DataMember(Name="CountryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The address of the manufacturer&#39;s headquarters
        /// </summary>
        /// <value>The address of the manufacturer&#39;s headquarters</value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The manufacturer&#39;s website
        /// </summary>
        /// <value>The manufacturer&#39;s website</value>
        [DataMember(Name="Website", EmitDefaultValue=true)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManufacturerInfoDto {\n");
            sb.Append("  ManufacturerId: ").Append(ManufacturerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManufacturerInfoDto);
        }

        /// <summary>
        /// Returns true if ManufacturerInfoDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ManufacturerInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManufacturerInfoDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ManufacturerId == input.ManufacturerId ||
                    this.ManufacturerId.Equals(input.ManufacturerId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ManufacturerId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
