/* 
 * TomiSoft Product Database Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TomiSoft.ProductCatalog.Client.OpenApiGenerated.Client.OpenAPIDateConverter;

namespace TomiSoft.ProductCatalog.Client.OpenApiGenerated.Model
{
    /// <summary>
    /// ProductImageDto
    /// </summary>
    [DataContract]
    public partial class ProductImageDto :  IEquatable<ProductImageDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductImageDto" /> class.
        /// </summary>
        /// <param name="imageUrl">The URL of the image.</param>
        /// <param name="imageID">The unique ID of the image.</param>
        public ProductImageDto(string imageUrl = default(string), int imageID = default(int))
        {
            this.ImageUrl = imageUrl;
            this.ImageID = imageID;
        }
        
        /// <summary>
        /// The URL of the image
        /// </summary>
        /// <value>The URL of the image</value>
        [DataMember(Name="ImageUrl", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// The unique ID of the image
        /// </summary>
        /// <value>The unique ID of the image</value>
        [DataMember(Name="ImageID", EmitDefaultValue=false)]
        public int ImageID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductImageDto {\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  ImageID: ").Append(ImageID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductImageDto);
        }

        /// <summary>
        /// Returns true if ProductImageDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductImageDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductImageDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.ImageID == input.ImageID ||
                    this.ImageID.Equals(input.ImageID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImageUrl != null)
                    hashCode = hashCode * 59 + this.ImageUrl.GetHashCode();
                hashCode = hashCode * 59 + this.ImageID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
